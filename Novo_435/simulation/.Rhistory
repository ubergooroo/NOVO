first_name<-splitname[[1]][1];first_name
first_init<-paste(substr(first_name,1,1),'.',' ',sep='')
return(first_init)
}
getFirstInitial(splitName("Uber Gooroo"))
getFirstInitial<-function(splitname) {
first_name<-splitname[[1]][1];first_name
first_init<-paste(substr(first_name,1,1),'. ',sep='')
return(first_init)
}
getFirstInitial(splitName("Uber Gooroo"))
x<-splitName("Donald Duck")
firstInitial_lastName(getFirstInitial(x),getLastName(x))
x<-lapply(c("Donald Duck", "Micky Mouse", "Daffy Duck", "Minnie Mouse"),splitName)
lapply(x,firstInitial_lastName)
x
firstInitial_lastName(getFirstInitial(x),getLastName(x))
x<-lapply(c("Donald Duck", "Micky Mouse", "Daffy Duck", "Minnie Mouse"),splitName)
mapply(x,firstInitial_lastName)
mapply(x,x,x,firstInitial_lastName)
x
mapply(x,x,x,firstInitial_lastName(getFirstInitial(x),getLastName(x)))
mapply(x,x,x,firstInitial_lastName(getFirstInitial,getLastName)
mapply(x,x,x,firstInitial_lastName(getFirstInitial,getLastName))
mapply(x,firstInitial_lastName(getFirstInitial,getLastName))
mapply(list=x,firstInitial_lastName(getFirstInitial,getLastName))
x
mapply(list=x,firstInitial_lastName(getFirstInitial,getLastName))
mapply(list=x,firstInitial_lastName)
mapply(list=x,firstInitial_lastName(list))
mapply(list=x,firstInitial_lastName(getFirstInitial(list),getLastName(list)))
apply(list=x,firstInitial_lastName(getFirstInitial(list),getLastName(list)))
mapply(list=x,firstInitial_lastName(getFirstInitial(list),getLastName(list)))
list
list=x
list
mapply(list=x,firstInitial_lastName(getFirstInitial(list),getLastName(list)))
list
mapply(list=x,firstInitial_lastName(getFirstInitial(),getLastName()))
x<-splitName("Donald Duck")
firstInitial_lastName(getFirstInitial(x),getLastName(x))
x<-splitName("Donald Duck")
firstInitial_lastName(getFirstInitial(x),getLastName(x))
x<-splitName("Donald Duck")
firstInitial_lastName(getFirstInitial(x),getLastName(x))
splitName<-function(name) {
first_last<-lapply(name,strsplit(name, " "))
return(first_last)
}
splitName("Uber Gooroo")
name
splitName<-function(name) {
first_last<-lapply(name,strsplit(, " "))
return(first_last)
}
splitName("Uber Gooroo")
splitName<-function(name) {
first_last<-lapply(name,strsplit(" "))
return(first_last)
}
splitName("Uber Gooroo")
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName("Uber Gooroo")
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName(c("Uber Gooroo")
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName(c("Uber Gooroo"))
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName(c("Uber Gooroo"))
?strsplit
splitName<-function(name) {
first_last<-vapply(name,strsplit(split=" "))
return(first_last)
}
splitName(c("Uber Gooroo"))
splitName<-function(name) {
first_last<-vapply(name,strsplit(name,split=" "))
return(first_last)
}
splitName(c("Uber Gooroo"))
splitName<-function(name) {
first_last<-vapply(name,strsplit(split=" "))
return(first_last)
}
splitName(c("Uber Gooroo"))
splitName<-function(name) {
first_last<-apply(name,strsplit(split=" "))
return(first_last)
}
splitName(c("Uber Gooroo"))
splitName<-function(name) {
first_last<-apply(name,strsplit(split=" "))
return(first_last)
}
splitName(name=c("Uber Gooroo"))
splitName<-function(name) {
first_last<-apply(name,strsplit(split=" "))
return(first_last)
}
splitName(name=c("Uber Gooroo"))
name
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName(c("Uber Gooroo"))
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName(list=c("Uber Gooroo"))
splitName(list=c("Uber Gooroo"))
list
splitName(list=c("Uber Gooroo"))
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName(list=c("Uber Gooroo"))
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
splitName(list=c("Uber Gooroo"))
splitName
list
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
list<-c("Uber Gooroo")
splitName(list)
list
list<-c("Uber Gooroo","Mickey Mouse")
splitName(list)
list
splitName<-function(name) {
first_last<-lapply(name,strsplit(split=" "))
return(first_last)
}
list<-c("Uber Gooroo","Mickey Mouse")
splitName(list)
list<-c("Uber Gooroo","Mickey Mouse")
splitName(list)
name
list
first_last
name<-c("Uber Gooroo","Mickey Mouse")
splitName(name)
name<-c("Uber Gooroo","Mickey Mouse")
splitName(name)
name
install.packages("matching")
install.packages("Matching")
library("Matching")
data("lalonde")
attach(lalonde)
summary(lalonde)
Y <- lalonde$re78
Tr <- lalonde$treat
glm1 <- glm(Tr ~ age + educ + black + hisp + married + nodegr +
+ re74 + re75, family = binomial, data = lalonde)
glm
glm1
glm1$fitted
lalonde$propensity <-0
lalonde$propensity<-glm1$fitted
summary(lalonde)
install.packages("rattle")
library(rattle)
rattle()
summary(lalonde)
save(lalonde, file = "jhlalonde.RData")
lalonde_tx <-subset(lalonde, treat = 1)
lalonde_tx
summary(lalonde_tx)
lalonde_tx <-subset(lalonde, treat == 1)
summary(lalonde_tx)
save(lalonde_tx, file = "jhlalonde_tx.RData")
rattle()
rattle()
write.csv(lalonde, file = "jhlalonde.csv", row.names = FALSE)
write.csv(lalonde_tx, file = "jhlalonde_tx.csv", row.names = FALSE)
rattle()
rattle()
summary(lalonde)
write.csv(lalonde_tx, file = "jhlalonde_tx.csv", row.names = TRUE)
write.csv(lalonde_tx, file = "jhlalonde_tx.csv", row.names = TRUE)
write.csv(lalonde_tx, file = "jhlalonde_tx.csv", row.names = TRUE)
write.csv(lalonde, file = "jhlalonde.csv", row.names = TRUE)
latent<-read.csv(file = "data2.dat", row.names = TRUE)
latent<-read.csv(file = "data2.dat", header = header, sep = sep, quote = quote)
latent<-read.csv(file = "data2.dat", header = TRUE, sep = ",", quote = TRUE)
?read.table
latent<-read.csv("data2.dat", header = TRUE, sep = ",", quote = "\"")
names(latent)
summary(latent)
summary(lalonde)
g <- c(1,1,1,2,2,2,3,3,3)
x1 <- c(1.0,1.1,2.5,4.0,5,5,1.5,2,2)
x2 <- c(1.5,2.3,1.2,2.5,2,3,2.75,2.8,3.2)
x <- cbind(g,x1,x2)
x
n1 <- length(x[x[,1]==1,1])
n2 <- length(x[x[,1]==2,1])
n3 <- length(x[x[,1]==3,1])
n4 <- length(x[x[,1]==4,1])
N <- n1 + n2 + n3 + n4
n1 <- length(x[x[,1]==1,1])
n1
n4 <- length(x[x[,1]==4,1])
n1
n2
n3
n4
n4 <- length(x[x[,1]==4,1])
N <- n1 + n2 + n3 + n4
n4
[x[,1]
x[,1]
x[,1]==3
x[x[,1]==3,1]
x[x[,1]==2,1]
x[x[,1]==1,1]
n1
n2
n3
n4
N
length(x[x[,1]==4,1])
N <- n1 + n2 + n3 + n4
# Number of variables and groups
p <- 2
G <- 4
x
plot (x,y)
sscpt <- (N-1)*cov(x[,2:3])
x[,2:3]
cov(x[,2:3])
(N-1)*cov(x[,2:3])
(N-1)
sscpt
g1sscp <- (n1-1)*cov(x[x[,1]==1,2:3])
sscpt <- (N-1)*cov(x[,2:3]);sscpt
g1sscp <- (n1-1)*cov(x[x[,1]==1,2:3]);g1sscp
g2sscp <- (n2-1)*cov(x[x[,1]==2,2:3]);g2sscp
g3sscp <- (n3-1)*cov(x[x[,1]==3,2:3]);g3sscp
g4sscp <- (n4-1)*cov(x[x[,1]==4,2:3]);g4sscp
sscpw <- g1sscp + g2sscp + g3sscp + g4sscp
sscpw
g <- c(1,1,1,2,2,2,3,3,3,4,4,4)
x1 <- c(1.0,1.1,2.5,4.0,5,5,1.5,2,2,3.0,3.1,2.5)
x2 <- c(1.5,2.3,1.2,2.5,2,3,2.75,2.8,3.2,2.1,2.2,2.3)
x <- cbind(g,x1,x2); x
n1 <- length(x[x[,1]==1,1]) #equates to give me the rows where the columns equal 1
n2 <- length(x[x[,1]==2,1]) #equates to give me the rows where the columns equal 2
n3 <- length(x[x[,1]==3,1]) #equates to give me the rows where the columns equal 3
n4 <- length(x[x[,1]==4,1]) #equateds to give me the rows where the columns equal 4 (there are none)
N <- n1 + n2 + n3 + n4 #the total number of observations
p <- 2
G <- 4
sscpt <- (N-1)*cov(x[,2:3]);sscpt
g1sscp <- (n1-1)*cov(x[x[,1]==1,2:3]);g1sscp
g2sscp <- (n2-1)*cov(x[x[,1]==2,2:3]);g2sscp
g3sscp <- (n3-1)*cov(x[x[,1]==3,2:3]);g3sscp
g4sscp <- (n4-1)*cov(x[x[,1]==4,2:3]);g4sscp
sscpw <- g1sscp + g2sscp + g3sscp + g4sscp
sscpb <- sscpt - sscpw
sscpw
sscpb
g1sscp
sscpw
sscpb
n4
n1
e <- eigen(solve(sscpw) %*% sscpb)
e
0.797x1
0.604x2
x[,2]
results <- data.frame(g=x[,1])
results
x[,2]
results$z1 <- (e$vectors[1,1]*x[,2]) + (e$vectors[2,1]*x[,3])
results$z2 <- (e$vectors[1,2]*x[,2]) + (e$vectors[2,2]*x[,3])
plot(x1,x2)
plot(x1,x2, col ="red")
mydf = x
qplot(x1, x2, colour = g,  data = mydf)
library("ggplot2")
mydf = x
qplot(x1, x2, colour = g,  data = mydf)
x
mydf = data.frame(x)
mydf
qplot(x1, x2, colour = g,  data = mydf)
qplot(x1, x2, colour = g,  data = x)
qplot(x1, x2, colour = g,  data = mydf)
qplot(x1, x2, shape = g,  data = mydf)
qplot(x1, x2, colour = as.factor(g),  data = mydf)
results
qplot(z1, z2, colour = as.factor(g),  data = results)
parmfro(2,2)
qplot(z1, z2, colour = as.factor(g),  data = results)
qplot(x1, x2, colour = as.factor(g),  data = mydf)
require(gridExtra)
install.packages("gridExtra")
# now to plot the points
library("ggplot2")
library(gridExtra)
plot1<-qplot(z1, z2, colour = as.factor(g),  data = results)
plot2<-qplot(x1, x2, colour = as.factor(g),  data = mydf)
grid.arrange(plot1, plot2, ncol=2)
library(MASS)
xdata <- data.frame(x)
model <- lda(g~., data=xdata)
print(model)
sqrt(1.876^2 + 1.422^2)
standardize<-sqrt(1.876^2 + 1.422^2)
1.876/standardize
1.876/standardize
1.422/standardize # this should equate to the first operand in the original z2
attach(airquality)
airquality
head(airquality)
names(airquality) <- tolower(names(airquality))
head(airquality)
aql <- melt(airquality) # [a]ir [q]uality [l]ong format
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
load("C:/Users/ubergooroo/Downloads/optsub.rdata")
readme
README
names(preopen)
names(prepen)
names(propen)
names(d65)
names(xmat)
head(xmat)
names(xmat)
propen
install.packages("optmatch")
README
View(`d65`)
View(xmat)
View(`d65`)
smahal
jendist<-smahal(d65$z,xmat)
jendist
README
jendist<-addcaliper(jendist,d65$z,d65$p)
jendist
dim(jendist)
README
pairmatchelastic
View(xmat)
library(survey)
data(api) #http://r-survey.r-forge.r-project.org/survey/html/api.html
# apisrs is a simple random sample of 200 schools from the full population of California Schools
names(apisrs) # what are the names of the variables
head(apisrs) # display the first 6 lines of data
dim(apisrs) # what are the dimensions of the dataset (rows, cols)
mean(apipop$api00)
sum(apipop$enroll, na.rm=TRUE)
srs_design <- svydesign(id=~1, fcp=~fpc, data=apisrs); srs_design
svytotal(~enroll, srs_design)
svymean(~enroll, srs_design)
sum(apisrs$enroll, na.rm=TRUE)
svytotal(~enroll, srs_design)
svytotal(apipop$enroll, srs_design)
svytotal(apipop$enroll, srs_design)
svytotal(enroll, srs_design)
svytotal(apisrs$enroll, srs_design)
svytotal(~ enroll, srs_design)
svytotal(~enroll, srs_design)
svymean(~enroll, srs_design)
mean(apisrs$api00)
mean(apipop$api00)
mean(apisrs$enroll)
mean(apipop$api00)
library(survey)
# The survey package contains several subsamples from the California Academic Performance Index,
# in the api data set. First, we load these data:
data(api) #http://r-survey.r-forge.r-project.org/survey/html/api.html
# apisrs is a simple random sample of 200 schools from the full population of California Schools
names(apisrs) # what are the names of the variables
head(apisrs) # display the first 6 lines of data
dim(apisrs) # what are the dimensions of the dataset (rows, cols)
srs_design <- svydesign(id=~1, fcp=~fpc, data=apisrs); srs_design
svytotal(~enroll, srs_design)
sum(apisrs$enroll, na.rm=TRUE)
sum(apipop$enroll, na.rm=TRUE)
svymean(~enroll, srs_design)
se(apisrs$enroll)
stderr(apisrs$enroll)
mean(apisrs$enroll)
svymean(~enroll, srs_design)
mean(apipop$enroll)
library(survey)
# The survey package contains several subsamples from the California Academic Performance Index,
# in the api data set. First, we load these data:
data(api) #http://r-survey.r-forge.r-project.org/survey/html/api.html
# apisrs is a simple random sample of 200 schools from the full population of California Schools
names(apisrs) # what are the names of the variables
head(apisrs) # display the first 6 lines of data
dim(apisrs) #
srs_design <- svydesign(id=~1, fcp=~fpc, data=apisrs); srs_design
svytotal(~enroll, srs_design)
srs_design
sum(apisrs$enroll, na.rm=TRUE)
svytotal(~enroll, srs_design)
sum(apisrs$enroll, na.rm=TRUE)
sum(apipop$enroll, na.rm=TRUE)
svymean(~enroll, srs_design)
nofpc <- svydesign(id=~1, weights=~pw, data=apisrs)
nofpc
nofpc
svytotal(~enroll, nofpc)
srs_design <- svydesign(id=~1, fcp=~fpc, weights= ~pw, data=apisrs); srs_design
svytotal(~enroll, srs_design)
srs_design <- svydesign(id=~1, fcp= ~fpc, weights= ~pw, data=apisrs); srs_design
srs_design <- svydesign(id=~1, fcp= ~fpc, weights= ~pw, data=apisrs); srs_design
svytotal(~enroll, srs_design)
svymean(~enroll, srs_design)
svytotal(~enroll, srs_design)
svytotal(~enroll, srs_design)
nofpc <- svydesign(id=~1, weights=~pw, data=apisrs); nofpc
svytotal(~enroll, nofpc)
srs_design <- svydesign(id=~1, fcp= ~fpc, weights= ~pw, data=apisrs); srs_design
svytotal(~enroll, srs_design)
srs_design <- svydesign(id=~1, fcp= ~fpc, data=apisrs); srs_design
svytotal(~enroll, srs_design)
svytotal(~enroll, srs_design)
names(apisrs)
srs_design <- svydesign(id=~1, fcp=~fpc, data=apisrs); srs_design
svytotal(~enroll, srs_design)
sum(apisrs$enroll, na.rm=TRUE)
fpc
head(apisrs)
srs_design <- svydesign(id=~1, fcp=apisrs$fpc, data=apisrs); srs_design
svytotal(~enroll, srs_design)
svytotal(~enroll, srs_design)
srs_design <- svydesign(id=~1, fcp=~fpc, data=apisrs); srs_design
library(survey)
# The survey package contains several subsamples from the California Academic Performance Index,
# in the api data set. First, we load these data:
data(api) #http://r-survey.r-forge.r-project.org/survey/html/api.html
# apisrs is a simple random sample of 200 schools from the full population of California Schools
names(apisrs) # what are the names of the variables
head(apisrs) # display the first 6 lines of data
dim(apisrs) # what are the dimensions of the dataset (rows, cols)
# Survey designs are specified using the svydesign function. The main arguments to the
# the function are *id* to specify sampling units (PSUs and optionally later stages),
# *strata* to specify strata, *weights* to specify sampling weights, and *fpc* to specify
# finite population size corrections. These arguments should be given as formulas,
# referring to columns in a data frame given as the data argument.
# id=~1 indicates that individual schools were sampled.
# fpc=~fpc says the variable called fpc in the data sent contains the population size (#schools)
# the sampling weights will be derived from the population size and the sample size
# so they do not need to be specified here.
# the ~ just means to look in the data used in the function
# by putting the name of the variable behind a ; you can call that variable on the same line
srs_design <- svydesign(id=~1, fcp=~fpc, data=apisrs); srs_design
# > srs_design <- svydesign(id=~1, fcp=~fpc, data=apisrs); srs_design
# Warning message:
#         In svydesign.default(id = ~1, fcp = ~fpc, data = apisrs) :
#         No weights or probabilities supplied, assuming equal probability
# Independent Sampling design (with replacement)
# svydesign(id = ~1, fcp = ~fpc, data = apisrs)
svytotal(~enroll, srs_design)
##############################################################
#
# EB Example Simulate a Target Population
#
##############################################################
options(scipen=999)
options(digits=10)
library(ebal)
library(survey)
library(dplyr)
setwd('C:/Users/ubergooroo/Documents/GitHub/NOVO/Novo_435/simulation')
source("one_sample-fun.R")
source("eb_weighting-fun.R")
source("ipw_weighting-fun.R")
source("sipw_weighting-fun.R")
source("meta_data-fun.R")
# source("ipw_weighting-fun.R")
# source("sopw_weighting-fun.R")
#replicate<(3, {d<-one.sample(); c( eb.weighting(d), IPW(d), sIPW(d) )}) # this is to call the functions once they are created.
out<-replicate(4000, {d<-one.sample();c(eb.weighting(d), ipw.weighting(d),
sipw.weighting(d), meta.data(d))}) # this is to call the functions once they are created.
out
